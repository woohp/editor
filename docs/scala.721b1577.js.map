{"mappings":"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","sources":["./node_modules/monaco-editor/esm/vs/basic-languages/scala/scala.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    /*\r\n     * `...` is allowed as an identifier.\r\n     * $ is allowed in identifiers.\r\n     * unary_<op> is allowed as an identifier.\r\n     * <name>_= is allowed as an identifier.\r\n     */\r\n    wordPattern: /(unary_[@~!#%^&*()\\-=+\\\\|:<>\\/?]+)|([a-zA-Z_$][\\w$]*?_=)|(`[^`]+`)|([a-zA-Z_$][\\w$]*)/g,\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp('^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))'),\r\n            end: new RegExp('^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))')\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    tokenPostfix: '.scala',\r\n    // We can't easily add everything from Dotty, but we can at least add some of its keywords\r\n    keywords: [\r\n        'asInstanceOf',\r\n        'catch',\r\n        'class',\r\n        'classOf',\r\n        'def',\r\n        'do',\r\n        'else',\r\n        'extends',\r\n        'finally',\r\n        'for',\r\n        'foreach',\r\n        'forSome',\r\n        'if',\r\n        'import',\r\n        'isInstanceOf',\r\n        'macro',\r\n        'match',\r\n        'new',\r\n        'object',\r\n        'package',\r\n        'return',\r\n        'throw',\r\n        'trait',\r\n        'try',\r\n        'type',\r\n        'until',\r\n        'val',\r\n        'var',\r\n        'while',\r\n        'with',\r\n        'yield',\r\n        // Dotty-specific:\r\n        'given',\r\n        'enum',\r\n        'then'\r\n    ],\r\n    // Dotty-specific:\r\n    softKeywords: ['as', 'export', 'extension', 'end', 'derives', 'on'],\r\n    constants: ['true', 'false', 'null', 'this', 'super'],\r\n    modifiers: [\r\n        'abstract',\r\n        'final',\r\n        'implicit',\r\n        'lazy',\r\n        'override',\r\n        'private',\r\n        'protected',\r\n        'sealed'\r\n    ],\r\n    // Dotty-specific:\r\n    softModifiers: ['inline', 'opaque', 'open', 'transparent', 'using'],\r\n    name: /(?:[a-z_$][\\w$]*|`[^`]+`)/,\r\n    type: /(?:[A-Z][\\w$]*)/,\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/^\\\\%@#]+/,\r\n    digits: /\\d+(_+\\d+)*/,\r\n    hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\r\n    // C# style strings\r\n    escapes: /\\\\(?:[btnfr\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    fstring_conv: /[bBhHsScCdoxXeEfgGaAt]|[Tn](?:[HIklMSLNpzZsQ]|[BbhAaCYyjmde]|[RTrDFC])/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // strings\r\n            [/\\braw\"\"\"/, { token: 'string.quote', bracket: '@open', next: '@rawstringt' }],\r\n            [/\\braw\"/, { token: 'string.quote', bracket: '@open', next: '@rawstring' }],\r\n            [/\\bs\"\"\"/, { token: 'string.quote', bracket: '@open', next: '@sstringt' }],\r\n            [/\\bs\"/, { token: 'string.quote', bracket: '@open', next: '@sstring' }],\r\n            [/\\bf\"\"\"\"/, { token: 'string.quote', bracket: '@open', next: '@fstringt' }],\r\n            [/\\bf\"/, { token: 'string.quote', bracket: '@open', next: '@fstring' }],\r\n            [/\"\"\"/, { token: 'string.quote', bracket: '@open', next: '@stringt' }],\r\n            [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }],\r\n            // numbers\r\n            [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float', '@allowMethod'],\r\n            [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float', '@allowMethod'],\r\n            [/0[xX](@hexdigits)[Ll]?/, 'number.hex', '@allowMethod'],\r\n            [/(@digits)[fFdD]/, 'number.float', '@allowMethod'],\r\n            [/(@digits)[lL]?/, 'number', '@allowMethod'],\r\n            [/\\b_\\*/, 'key'],\r\n            [/\\b(_)\\b/, 'keyword', '@allowMethod'],\r\n            // identifiers and keywords\r\n            [/\\bimport\\b/, 'keyword', '@import'],\r\n            [/\\b(case)([ \\t]+)(class)\\b/, ['keyword.modifier', 'white', 'keyword']],\r\n            [/\\bcase\\b/, 'keyword', '@case'],\r\n            [/\\bva[lr]\\b/, 'keyword', '@vardef'],\r\n            [\r\n                /\\b(def)([ \\t]+)((?:unary_)?@symbols|@name(?:_=)|@name)/,\r\n                ['keyword', 'white', 'identifier']\r\n            ],\r\n            [/@name(?=[ \\t]*:(?!:))/, 'variable'],\r\n            [/(\\.)(@name|@symbols)/, ['operator', { token: '@rematch', next: '@allowMethod' }]],\r\n            [/([{(])(\\s*)(@name(?=\\s*=>))/, ['@brackets', 'white', 'variable']],\r\n            [\r\n                /@name/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@softKeywords': 'keyword',\r\n                        '@modifiers': 'keyword.modifier',\r\n                        '@softModifiers': 'keyword.modifier',\r\n                        '@constants': {\r\n                            token: 'constant',\r\n                            next: '@allowMethod'\r\n                        },\r\n                        '@default': {\r\n                            token: 'identifier',\r\n                            next: '@allowMethod'\r\n                        }\r\n                    }\r\n                }\r\n            ],\r\n            [/@type/, 'type', '@allowMethod'],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // @ annotations.\r\n            [/@[a-zA-Z_$][\\w$]*(?:\\.[a-zA-Z_$][\\w$]*)*/, 'annotation'],\r\n            // delimiters and operators\r\n            [/[{(]/, '@brackets'],\r\n            [/[})]/, '@brackets', '@allowMethod'],\r\n            [/\\[/, 'operator.square'],\r\n            [/](?!\\s*(?:va[rl]|def|type)\\b)/, 'operator.square', '@allowMethod'],\r\n            [/]/, 'operator.square'],\r\n            [/([=-]>|<-|>:|<:|:>|<%)(?=[\\s\\w()[\\]{},\\.\"'`])/, 'keyword'],\r\n            [/@symbols/, 'operator'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,\\.]/, 'delimiter'],\r\n            // symbols\r\n            [/'[a-zA-Z$][\\w$]*(?!')/, 'attribute.name'],\r\n            // characters\r\n            [/'[^\\\\']'/, 'string', '@allowMethod'],\r\n            [\r\n                /(')(@escapes)(')/,\r\n                ['string', 'string.escape', { token: 'string', next: '@allowMethod' }]\r\n            ],\r\n            [/'/, 'string.invalid']\r\n        ],\r\n        import: [\r\n            [/;/, 'delimiter', '@pop'],\r\n            [/^|$/, '', '@pop'],\r\n            [/[ \\t]+/, 'white'],\r\n            [/[\\n\\r]+/, 'white', '@pop'],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/@name|@type/, 'type'],\r\n            [/[(){}]/, '@brackets'],\r\n            [/[[\\]]/, 'operator.square'],\r\n            [/[\\.,]/, 'delimiter']\r\n        ],\r\n        allowMethod: [\r\n            [/^|$/, '', '@pop'],\r\n            [/[ \\t]+/, 'white'],\r\n            [/[\\n\\r]+/, 'white', '@pop'],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/(?==>[\\s\\w([{])/, 'keyword', '@pop'],\r\n            [\r\n                /(@name|@symbols)(?=[ \\t]*[[({\"'`]|[ \\t]+(?:[+-]?\\.?\\d|\\w))/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword', next: '@pop' },\r\n                        '->|<-|>:|<:|<%': { token: 'keyword', next: '@pop' },\r\n                        '@default': { token: '@rematch', next: '@pop' }\r\n                    }\r\n                }\r\n            ],\r\n            ['', '', '@pop']\r\n        ],\r\n        comment: [\r\n            [/[^\\/*]+/, 'comment'],\r\n            [/\\/\\*/, 'comment', '@push'],\r\n            [/\\*\\//, 'comment', '@pop'],\r\n            [/[\\/*]/, 'comment']\r\n        ],\r\n        case: [\r\n            [/\\b_\\*/, 'key'],\r\n            [/\\b(_|true|false|null|this|super)\\b/, 'keyword', '@allowMethod'],\r\n            [/\\bif\\b|=>/, 'keyword', '@pop'],\r\n            [/`[^`]+`/, 'identifier', '@allowMethod'],\r\n            [/@name/, 'variable', '@allowMethod'],\r\n            [/:::?|\\||@(?![a-z_$])/, 'keyword'],\r\n            { include: '@root' }\r\n        ],\r\n        vardef: [\r\n            [/\\b_\\*/, 'key'],\r\n            [/\\b(_|true|false|null|this|super)\\b/, 'keyword'],\r\n            [/@name/, 'variable'],\r\n            [/:::?|\\||@(?![a-z_$])/, 'keyword'],\r\n            [/=|:(?!:)/, 'operator', '@pop'],\r\n            [/$/, 'white', '@pop'],\r\n            { include: '@root' }\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"\\n\\r]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [\r\n                /\"/,\r\n                {\r\n                    token: 'string.quote',\r\n                    bracket: '@close',\r\n                    switchTo: '@allowMethod'\r\n                }\r\n            ]\r\n        ],\r\n        stringt: [\r\n            [/[^\\\\\"\\n\\r]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"(?=\"\"\")/, 'string'],\r\n            [\r\n                /\"\"\"/,\r\n                {\r\n                    token: 'string.quote',\r\n                    bracket: '@close',\r\n                    switchTo: '@allowMethod'\r\n                }\r\n            ],\r\n            [/\"/, 'string']\r\n        ],\r\n        fstring: [\r\n            [/@escapes/, 'string.escape'],\r\n            [\r\n                /\"/,\r\n                {\r\n                    token: 'string.quote',\r\n                    bracket: '@close',\r\n                    switchTo: '@allowMethod'\r\n                }\r\n            ],\r\n            [/\\$\\$/, 'string'],\r\n            [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']],\r\n            [/\\$\\{/, 'operator', '@interp'],\r\n            [/%%/, 'string'],\r\n            [\r\n                /(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/,\r\n                ['metatag', 'keyword.modifier', 'number', 'metatag']\r\n            ],\r\n            [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, ['metatag', 'number', 'metatag']],\r\n            [/(%)([\\-#+ 0,(])(@fstring_conv)/, ['metatag', 'keyword.modifier', 'metatag']],\r\n            [/(%)(@fstring_conv)/, ['metatag', 'metatag']],\r\n            [/./, 'string']\r\n        ],\r\n        fstringt: [\r\n            [/@escapes/, 'string.escape'],\r\n            [/\"(?=\"\"\")/, 'string'],\r\n            [\r\n                /\"\"\"/,\r\n                {\r\n                    token: 'string.quote',\r\n                    bracket: '@close',\r\n                    switchTo: '@allowMethod'\r\n                }\r\n            ],\r\n            [/\\$\\$/, 'string'],\r\n            [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']],\r\n            [/\\$\\{/, 'operator', '@interp'],\r\n            [/%%/, 'string'],\r\n            [\r\n                /(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/,\r\n                ['metatag', 'keyword.modifier', 'number', 'metatag']\r\n            ],\r\n            [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, ['metatag', 'number', 'metatag']],\r\n            [/(%)([\\-#+ 0,(])(@fstring_conv)/, ['metatag', 'keyword.modifier', 'metatag']],\r\n            [/(%)(@fstring_conv)/, ['metatag', 'metatag']],\r\n            [/./, 'string']\r\n        ],\r\n        sstring: [\r\n            [/@escapes/, 'string.escape'],\r\n            [\r\n                /\"/,\r\n                {\r\n                    token: 'string.quote',\r\n                    bracket: '@close',\r\n                    switchTo: '@allowMethod'\r\n                }\r\n            ],\r\n            [/\\$\\$/, 'string'],\r\n            [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']],\r\n            [/\\$\\{/, 'operator', '@interp'],\r\n            [/./, 'string']\r\n        ],\r\n        sstringt: [\r\n            [/@escapes/, 'string.escape'],\r\n            [/\"(?=\"\"\")/, 'string'],\r\n            [\r\n                /\"\"\"/,\r\n                {\r\n                    token: 'string.quote',\r\n                    bracket: '@close',\r\n                    switchTo: '@allowMethod'\r\n                }\r\n            ],\r\n            [/\\$\\$/, 'string'],\r\n            [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']],\r\n            [/\\$\\{/, 'operator', '@interp'],\r\n            [/./, 'string']\r\n        ],\r\n        interp: [[/{/, 'operator', '@push'], [/}/, 'operator', '@pop'], { include: '@root' }],\r\n        rawstring: [\r\n            [/[^\"]/, 'string'],\r\n            [\r\n                /\"/,\r\n                {\r\n                    token: 'string.quote',\r\n                    bracket: '@close',\r\n                    switchTo: '@allowMethod'\r\n                }\r\n            ]\r\n        ],\r\n        rawstringt: [\r\n            [/[^\"]/, 'string'],\r\n            [/\"(?=\"\"\")/, 'string'],\r\n            [\r\n                /\"\"\"/,\r\n                {\r\n                    token: 'string.quote',\r\n                    bracket: '@close',\r\n                    switchTo: '@allowMethod'\r\n                }\r\n            ],\r\n            [/\"/, 'string']\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, 'white'],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment']\r\n        ]\r\n    }\r\n};\r\n"],"names":["conf","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","tokenPostfix","keywords","softKeywords","constants","modifiers","softModifiers","name","type","symbols","digits","hexdigits","escapes","fstring_conv","tokenizer","root","token","bracket","next","cases","@keywords","@softKeywords","@modifiers","@softModifiers","@constants","@default","include","import","allowMethod","->|<-|>:|<:|<%","comment","case","vardef","string","switchTo","stringt","fstring","fstringt","sstring","sstringt","interp","rawstring","rawstringt","whitespace"],"version":3,"file":"scala.721b1577.js.map"}