{"mappings":"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","sources":["./node_modules/monaco-editor/esm/vs/basic-languages/markdown/markdown.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    comments: {\r\n        blockComment: ['<!--', '-->']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>', notIn: ['string'] }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '(', close: ')' },\r\n        { open: '[', close: ']' },\r\n        { open: '`', close: '`' }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp('^\\\\s*<!--\\\\s*#?region\\\\b.*-->'),\r\n            end: new RegExp('^\\\\s*<!--\\\\s*#?endregion\\\\b.*-->')\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.md',\r\n    // escape codes\r\n    control: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\r\n    noncontrol: /[^\\\\`*_\\[\\]{}()#+\\-\\.!]/,\r\n    escapes: /\\\\(?:@control)/,\r\n    // escape codes for javascript/CSS strings\r\n    jsescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\r\n    // non matched elements\r\n    empty: [\r\n        'area',\r\n        'base',\r\n        'basefont',\r\n        'br',\r\n        'col',\r\n        'frame',\r\n        'hr',\r\n        'img',\r\n        'input',\r\n        'isindex',\r\n        'link',\r\n        'meta',\r\n        'param'\r\n    ],\r\n    tokenizer: {\r\n        root: [\r\n            // markdown tables\r\n            [/^\\s*\\|/, '@rematch', '@table_header'],\r\n            // headers (with #)\r\n            [\r\n                /^(\\s{0,3})(#+)((?:[^\\\\#]|@escapes)+)((?:#+)?)/,\r\n                ['white', 'keyword', 'keyword', 'keyword']\r\n            ],\r\n            // headers (with =)\r\n            [/^\\s*(=+|\\-+)\\s*$/, 'keyword'],\r\n            // headers (with ***)\r\n            [/^\\s*((\\*[ ]?)+)\\s*$/, 'meta.separator'],\r\n            // quote\r\n            [/^\\s*>+/, 'comment'],\r\n            // list (starting with * or number)\r\n            [/^\\s*([\\*\\-+:]|\\d+\\.)\\s/, 'keyword'],\r\n            // code block (4 spaces indent)\r\n            [/^(\\t|[ ]{4})[^ ].*$/, 'string'],\r\n            // code block (3 tilde)\r\n            [/^\\s*~~~\\s*((?:\\w|[\\/\\-#])+)?\\s*$/, { token: 'string', next: '@codeblock' }],\r\n            // github style code blocks (with backticks and language)\r\n            [\r\n                /^\\s*```\\s*((?:\\w|[\\/\\-#])+).*$/,\r\n                { token: 'string', next: '@codeblockgh', nextEmbedded: '$1' }\r\n            ],\r\n            // github style code blocks (with backticks but no language)\r\n            [/^\\s*```\\s*$/, { token: 'string', next: '@codeblock' }],\r\n            // markup within lines\r\n            { include: '@linecontent' }\r\n        ],\r\n        table_header: [\r\n            { include: '@table_common' },\r\n            [/[^\\|]+/, 'keyword.table.header'] // table header\r\n        ],\r\n        table_body: [{ include: '@table_common' }, { include: '@linecontent' }],\r\n        table_common: [\r\n            [/\\s*[\\-:]+\\s*/, { token: 'keyword', switchTo: 'table_body' }],\r\n            [/^\\s*\\|/, 'keyword.table.left'],\r\n            [/^\\s*[^\\|]/, '@rematch', '@pop'],\r\n            [/^\\s*$/, '@rematch', '@pop'],\r\n            [\r\n                /\\|/,\r\n                {\r\n                    cases: {\r\n                        '@eos': 'keyword.table.right',\r\n                        '@default': 'keyword.table.middle' // inner |\r\n                    }\r\n                }\r\n            ]\r\n        ],\r\n        codeblock: [\r\n            [/^\\s*~~~\\s*$/, { token: 'string', next: '@pop' }],\r\n            [/^\\s*```\\s*$/, { token: 'string', next: '@pop' }],\r\n            [/.*$/, 'variable.source']\r\n        ],\r\n        // github style code blocks\r\n        codeblockgh: [\r\n            [/```\\s*$/, { token: 'variable.source', next: '@pop', nextEmbedded: '@pop' }],\r\n            [/[^`]+/, 'variable.source']\r\n        ],\r\n        linecontent: [\r\n            // escapes\r\n            [/&\\w+;/, 'string.escape'],\r\n            [/@escapes/, 'escape'],\r\n            // various markup\r\n            [/\\b__([^\\\\_]|@escapes|_(?!_))+__\\b/, 'strong'],\r\n            [/\\*\\*([^\\\\*]|@escapes|\\*(?!\\*))+\\*\\*/, 'strong'],\r\n            [/\\b_[^_]+_\\b/, 'emphasis'],\r\n            [/\\*([^\\\\*]|@escapes)+\\*/, 'emphasis'],\r\n            [/`([^\\\\`]|@escapes)+`/, 'variable'],\r\n            // links\r\n            [/\\{+[^}]+\\}+/, 'string.target'],\r\n            [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\]\\([^\\)]+\\))/, ['string.link', '', 'string.link']],\r\n            [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\])/, 'string.link'],\r\n            // or html\r\n            { include: 'html' }\r\n        ],\r\n        // Note: it is tempting to rather switch to the real HTML mode instead of building our own here\r\n        // but currently there is a limitation in Monarch that prevents us from doing it: The opening\r\n        // '<' would start the HTML mode, however there is no way to jump 1 character back to let the\r\n        // HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,\r\n        // we cannot correctly tokenize it in that mode yet.\r\n        html: [\r\n            // html tags\r\n            [/<(\\w+)\\/>/, 'tag'],\r\n            [\r\n                /<(\\w+)/,\r\n                {\r\n                    cases: {\r\n                        '@empty': { token: 'tag', next: '@tag.$1' },\r\n                        '@default': { token: 'tag', next: '@tag.$1' }\r\n                    }\r\n                }\r\n            ],\r\n            [/<\\/(\\w+)\\s*>/, { token: 'tag' }],\r\n            [/<!--/, 'comment', '@comment']\r\n        ],\r\n        comment: [\r\n            [/[^<\\-]+/, 'comment.content'],\r\n            [/-->/, 'comment', '@pop'],\r\n            [/<!--/, 'comment.content.invalid'],\r\n            [/[<\\-]/, 'comment.content']\r\n        ],\r\n        // Almost full HTML tag matching, complete with embedded scripts & styles\r\n        tag: [\r\n            [/[ \\t\\r\\n]+/, 'white'],\r\n            [\r\n                /(type)(\\s*=\\s*)(\")([^\"]+)(\")/,\r\n                [\r\n                    'attribute.name.html',\r\n                    'delimiter.html',\r\n                    'string.html',\r\n                    { token: 'string.html', switchTo: '@tag.$S2.$4' },\r\n                    'string.html'\r\n                ]\r\n            ],\r\n            [\r\n                /(type)(\\s*=\\s*)(')([^']+)(')/,\r\n                [\r\n                    'attribute.name.html',\r\n                    'delimiter.html',\r\n                    'string.html',\r\n                    { token: 'string.html', switchTo: '@tag.$S2.$4' },\r\n                    'string.html'\r\n                ]\r\n            ],\r\n            [\r\n                /(\\w+)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/,\r\n                ['attribute.name.html', 'delimiter.html', 'string.html']\r\n            ],\r\n            [/\\w+/, 'attribute.name.html'],\r\n            [/\\/>/, 'tag', '@pop'],\r\n            [\r\n                />/,\r\n                {\r\n                    cases: {\r\n                        '$S2==style': {\r\n                            token: 'tag',\r\n                            switchTo: 'embeddedStyle',\r\n                            nextEmbedded: 'text/css'\r\n                        },\r\n                        '$S2==script': {\r\n                            cases: {\r\n                                $S3: {\r\n                                    token: 'tag',\r\n                                    switchTo: 'embeddedScript',\r\n                                    nextEmbedded: '$S3'\r\n                                },\r\n                                '@default': {\r\n                                    token: 'tag',\r\n                                    switchTo: 'embeddedScript',\r\n                                    nextEmbedded: 'text/javascript'\r\n                                }\r\n                            }\r\n                        },\r\n                        '@default': { token: 'tag', next: '@pop' }\r\n                    }\r\n                }\r\n            ]\r\n        ],\r\n        embeddedStyle: [\r\n            [/[^<]+/, ''],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\r\n            [/</, '']\r\n        ],\r\n        embeddedScript: [\r\n            [/[^<]+/, ''],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\r\n            [/</, '']\r\n        ]\r\n    }\r\n};\r\n"],"names":["conf","comments","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","control","noncontrol","escapes","jsescapes","empty","tokenizer","root","token","next","nextEmbedded","include","table_header","table_body","table_common","switchTo","cases","@eos","@default","codeblock","codeblockgh","linecontent","html","@empty","comment","tag","$S2==style","$S2==script","$S3","embeddedStyle","embeddedScript"],"version":3,"file":"markdown.9e0bf7a2.js.map"}