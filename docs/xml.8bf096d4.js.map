{"mappings":"sxCAI0B,oCACfA,EAAAA,CACPC,SAAAA,CACIC,aAAAA,CAAe,UAAQ,WAE3BC,SAAAA,CAAAA,CAAY,IAAK,MACjBC,iBAAAA,CAAAA,CACMC,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAExBC,iBAAAA,CAAAA,CACMF,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAClBD,KAAM,IAAKC,MAAO,MAExBE,aAAAA,CAAAA,CAEQC,WAAAA,IAAgBC,OAAO,8CAA+C,KACtEC,UAAW,gCACXC,OAAAA,CACIC,aAAAA,EAAAA,UAAwBC,aAAaC,iBAIzCN,WAAAA,IAAgBC,OAAO,sCAAuC,KAC9DE,OAAAA,CAAUC,aAAAA,EAAAA,UAAwBC,aAAaE,WAIhDC,EAAAA,CACPC,aAAc,GACdC,aAAc,OACdC,YAAY,EAEZC,cAAe,2BACfC,UAAAA,CACIC,KAAAA,CAAAA,CACK,SAAU,IAAA,CACTC,QAAS,gBAEV,sBAAA,CAAA,CAA0BC,MAAO,cAAiBA,MAAO,MAAOC,KAAM,WAGnE,gCAAA,CAAA,CACGD,MAAO,cAAiBA,MAAO,OAAS,GAAA,CAAMA,MAAO,gBAG3D,wBAAA,CAAA,CAA4BA,MAAO,cAAiBA,MAAO,UAAWC,KAAM,WAE5E,wBAAA,CAAA,CAA4BD,MAAO,cAAiBA,MAAO,UAAWC,KAAM,WAE5E,eAAA,CAAkBD,MAAO,kBAAmBC,KAAM,YAClD,QAAS,kBAEdC,MAAAA,CAAAA,CACK,SAAU,IAAA,CACV,QAAA,CAAWF,MAAO,kBAAmBC,KAAM,UAC3C,KAAM,KAEXE,IAAAA,CAAAA,CACK,aAAc,IAAA,CAEX,6CAAA,CACC,iBAAkB,GAAI,oBAAA,CAGvB,+DAAA,CACC,iBAAkB,GAAI,oBAAA,CAGvB,6CAAA,CACC,iBAAkB,GAAI,oBAAA,CAE1B,iBAAkB,kBAAA,CAClB,MAAA,CAASH,MAAO,YAAaC,KAAM,UACnC,UAAA,CAAA,CAAcD,MAAO,QAAWA,MAAO,YAAaC,KAAM,WAC1D,IAAA,CAAOD,MAAO,YAAaC,KAAM,UAEtCG,WAAAA,CAAAA,CACK,aAAc,IAAA,CACd,OAAA,CAAUJ,MAAO,UAAWC,KAAM,cAEvCI,QAAAA,CAAAA,CACK,UAAW,mBAAA,CACX,MAAA,CAASL,MAAO,UAAWC,KAAM,UACjC,OAAQ,2BAAA,CACR,QAAS","sources":["./node_modules/monaco-editor/esm/vs/basic-languages/xml/xml.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { languages } from '../fillers/monaco-editor-core.js';\r\nexport var conf = {\r\n    comments: {\r\n        blockComment: ['<!--', '-->']\r\n    },\r\n    brackets: [['<', '>']],\r\n    autoClosingPairs: [\r\n        { open: '<', close: '>' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: '\"', close: '\"' }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '<', close: '>' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: '\"', close: '\"' }\r\n    ],\r\n    onEnterRules: [\r\n        {\r\n            beforeText: new RegExp(\"<([_:\\\\w][_:\\\\w-.\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            afterText: /^<\\/([_:\\w][_:\\w-.\\d]*)\\s*>$/i,\r\n            action: {\r\n                indentAction: languages.IndentAction.IndentOutdent\r\n            }\r\n        },\r\n        {\r\n            beforeText: new RegExp(\"<(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            action: { indentAction: languages.IndentAction.Indent }\r\n        }\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.xml',\r\n    ignoreCase: true,\r\n    // Useful regular expressions\r\n    qualifiedName: /(?:[\\w\\.\\-]+:)?[\\w\\.\\-]+/,\r\n    tokenizer: {\r\n        root: [\r\n            [/[^<&]+/, ''],\r\n            { include: '@whitespace' },\r\n            // Standard opening tag\r\n            [/(<)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'tag', next: '@tag' }]],\r\n            // Standard closing tag\r\n            [\r\n                /(<\\/)(@qualifiedName)(\\s*)(>)/,\r\n                [{ token: 'delimiter' }, { token: 'tag' }, '', { token: 'delimiter' }]\r\n            ],\r\n            // Meta tags - instruction\r\n            [/(<\\?)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'metatag', next: '@tag' }]],\r\n            // Meta tags - declaration\r\n            [/(<\\!)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'metatag', next: '@tag' }]],\r\n            // CDATA\r\n            [/<\\!\\[CDATA\\[/, { token: 'delimiter.cdata', next: '@cdata' }],\r\n            [/&\\w+;/, 'string.escape']\r\n        ],\r\n        cdata: [\r\n            [/[^\\]]+/, ''],\r\n            [/\\]\\]>/, { token: 'delimiter.cdata', next: '@pop' }],\r\n            [/\\]/, '']\r\n        ],\r\n        tag: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [\r\n                /(@qualifiedName)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/,\r\n                ['attribute.name', '', 'attribute.value']\r\n            ],\r\n            [\r\n                /(@qualifiedName)(\\s*=\\s*)(\"[^\">?\\/]*|'[^'>?\\/]*)(?=[\\?\\/]\\>)/,\r\n                ['attribute.name', '', 'attribute.value']\r\n            ],\r\n            [\r\n                /(@qualifiedName)(\\s*=\\s*)(\"[^\">]*|'[^'>]*)/,\r\n                ['attribute.name', '', 'attribute.value']\r\n            ],\r\n            [/@qualifiedName/, 'attribute.name'],\r\n            [/\\?>/, { token: 'delimiter', next: '@pop' }],\r\n            [/(\\/)(>)/, [{ token: 'tag' }, { token: 'delimiter', next: '@pop' }]],\r\n            [/>/, { token: 'delimiter', next: '@pop' }]\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/<!--/, { token: 'comment', next: '@comment' }]\r\n        ],\r\n        comment: [\r\n            [/[^<\\-]+/, 'comment.content'],\r\n            [/-->/, { token: 'comment', next: '@pop' }],\r\n            [/<!--/, 'comment.content.invalid'],\r\n            [/[<\\-]/, 'comment.content']\r\n        ]\r\n    }\r\n};\r\n"],"names":["conf","comments","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","onEnterRules","beforeText","RegExp","afterText","action","indentAction","IndentAction","IndentOutdent","Indent","language","defaultToken","tokenPostfix","ignoreCase","qualifiedName","tokenizer","root","include","token","next","cdata","tag","whitespace","comment"],"version":3,"file":"xml.8bf096d4.js.map"}