{"mappings":"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","sources":["./node_modules/monaco-editor/esm/vs/basic-languages/handlebars/handlebars.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { languages } from '../fillers/monaco-editor-core.js';\r\nvar EMPTY_ELEMENTS = [\r\n    'area',\r\n    'base',\r\n    'br',\r\n    'col',\r\n    'embed',\r\n    'hr',\r\n    'img',\r\n    'input',\r\n    'keygen',\r\n    'link',\r\n    'menuitem',\r\n    'meta',\r\n    'param',\r\n    'source',\r\n    'track',\r\n    'wbr'\r\n];\r\nexport var conf = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\r\n    comments: {\r\n        blockComment: ['{{!--', '--}}']\r\n    },\r\n    brackets: [\r\n        ['<!--', '-->'],\r\n        ['<', '>'],\r\n        ['{{', '}}'],\r\n        ['{', '}'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '<', close: '>' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    onEnterRules: [\r\n        {\r\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\r\n            action: {\r\n                indentAction: languages.IndentAction.IndentOutdent\r\n            }\r\n        },\r\n        {\r\n            beforeText: new RegExp(\"<(?!(?:\" + EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            action: { indentAction: languages.IndentAction.Indent }\r\n        }\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '',\r\n    // ignoreCase: true,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            [/\\{\\{!--/, 'comment.block.start.handlebars', '@commentBlock'],\r\n            [/\\{\\{!/, 'comment.start.handlebars', '@comment'],\r\n            [/\\{\\{/, { token: '@rematch', switchTo: '@handlebarsInSimpleState.root' }],\r\n            [/<!DOCTYPE/, 'metatag.html', '@doctype'],\r\n            [/<!--/, 'comment.html', '@commentHtml'],\r\n            [/(<)(\\w+)(\\/>)/, ['delimiter.html', 'tag.html', 'delimiter.html']],\r\n            [/(<)(script)/, ['delimiter.html', { token: 'tag.html', next: '@script' }]],\r\n            [/(<)(style)/, ['delimiter.html', { token: 'tag.html', next: '@style' }]],\r\n            [/(<)([:\\w]+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\r\n            [/(<\\/)(\\w+)/, ['delimiter.html', { token: 'tag.html', next: '@otherTag' }]],\r\n            [/</, 'delimiter.html'],\r\n            [/\\{/, 'delimiter.html'],\r\n            [/[^<{]+/] // text\r\n        ],\r\n        doctype: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.comment'\r\n                }\r\n            ],\r\n            [/[^>]+/, 'metatag.content.html'],\r\n            [/>/, 'metatag.html', '@pop']\r\n        ],\r\n        comment: [\r\n            [/\\}\\}/, 'comment.end.handlebars', '@pop'],\r\n            [/./, 'comment.content.handlebars']\r\n        ],\r\n        commentBlock: [\r\n            [/--\\}\\}/, 'comment.block.end.handlebars', '@pop'],\r\n            [/./, 'comment.content.handlebars']\r\n        ],\r\n        commentHtml: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.comment'\r\n                }\r\n            ],\r\n            [/-->/, 'comment.html', '@pop'],\r\n            [/[^-]+/, 'comment.content.html'],\r\n            [/./, 'comment.content.html']\r\n        ],\r\n        otherTag: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.otherTag'\r\n                }\r\n            ],\r\n            [/\\/?>/, 'delimiter.html', '@pop'],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/[ \\t\\r\\n]+/] // whitespace\r\n        ],\r\n        // -- BEGIN <script> tags handling\r\n        // After <script\r\n        script: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.script'\r\n                }\r\n            ],\r\n            [/type/, 'attribute.name', '@scriptAfterType'],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [\r\n                />/,\r\n                {\r\n                    token: 'delimiter.html',\r\n                    next: '@scriptEmbedded.text/javascript',\r\n                    nextEmbedded: 'text/javascript'\r\n                }\r\n            ],\r\n            [/[ \\t\\r\\n]+/],\r\n            [\r\n                /(<\\/)(script\\s*)(>)/,\r\n                ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]\r\n            ]\r\n        ],\r\n        // After <script ... type\r\n        scriptAfterType: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.scriptAfterType'\r\n                }\r\n            ],\r\n            [/=/, 'delimiter', '@scriptAfterTypeEquals'],\r\n            [\r\n                />/,\r\n                {\r\n                    token: 'delimiter.html',\r\n                    next: '@scriptEmbedded.text/javascript',\r\n                    nextEmbedded: 'text/javascript'\r\n                }\r\n            ],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <script ... type =\r\n        scriptAfterTypeEquals: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.scriptAfterTypeEquals'\r\n                }\r\n            ],\r\n            [\r\n                /\"([^\"]*)\"/,\r\n                {\r\n                    token: 'attribute.value',\r\n                    switchTo: '@scriptWithCustomType.$1'\r\n                }\r\n            ],\r\n            [\r\n                /'([^']*)'/,\r\n                {\r\n                    token: 'attribute.value',\r\n                    switchTo: '@scriptWithCustomType.$1'\r\n                }\r\n            ],\r\n            [\r\n                />/,\r\n                {\r\n                    token: 'delimiter.html',\r\n                    next: '@scriptEmbedded.text/javascript',\r\n                    nextEmbedded: 'text/javascript'\r\n                }\r\n            ],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <script ... type = $S2\r\n        scriptWithCustomType: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.scriptWithCustomType.$S2'\r\n                }\r\n            ],\r\n            [\r\n                />/,\r\n                {\r\n                    token: 'delimiter.html',\r\n                    next: '@scriptEmbedded.$S2',\r\n                    nextEmbedded: '$S2'\r\n                }\r\n            ],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        scriptEmbedded: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInEmbeddedState.scriptEmbedded.$S2',\r\n                    nextEmbedded: '@pop'\r\n                }\r\n            ],\r\n            [/<\\/script/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\r\n        ],\r\n        // -- END <script> tags handling\r\n        // -- BEGIN <style> tags handling\r\n        // After <style\r\n        style: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.style'\r\n                }\r\n            ],\r\n            [/type/, 'attribute.name', '@styleAfterType'],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [\r\n                />/,\r\n                {\r\n                    token: 'delimiter.html',\r\n                    next: '@styleEmbedded.text/css',\r\n                    nextEmbedded: 'text/css'\r\n                }\r\n            ],\r\n            [/[ \\t\\r\\n]+/],\r\n            [\r\n                /(<\\/)(style\\s*)(>)/,\r\n                ['delimiter.html', 'tag.html', { token: 'delimiter.html', next: '@pop' }]\r\n            ]\r\n        ],\r\n        // After <style ... type\r\n        styleAfterType: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.styleAfterType'\r\n                }\r\n            ],\r\n            [/=/, 'delimiter', '@styleAfterTypeEquals'],\r\n            [\r\n                />/,\r\n                {\r\n                    token: 'delimiter.html',\r\n                    next: '@styleEmbedded.text/css',\r\n                    nextEmbedded: 'text/css'\r\n                }\r\n            ],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <style ... type =\r\n        styleAfterTypeEquals: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.styleAfterTypeEquals'\r\n                }\r\n            ],\r\n            [\r\n                /\"([^\"]*)\"/,\r\n                {\r\n                    token: 'attribute.value',\r\n                    switchTo: '@styleWithCustomType.$1'\r\n                }\r\n            ],\r\n            [\r\n                /'([^']*)'/,\r\n                {\r\n                    token: 'attribute.value',\r\n                    switchTo: '@styleWithCustomType.$1'\r\n                }\r\n            ],\r\n            [\r\n                />/,\r\n                {\r\n                    token: 'delimiter.html',\r\n                    next: '@styleEmbedded.text/css',\r\n                    nextEmbedded: 'text/css'\r\n                }\r\n            ],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        // After <style ... type = $S2\r\n        styleWithCustomType: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInSimpleState.styleWithCustomType.$S2'\r\n                }\r\n            ],\r\n            [\r\n                />/,\r\n                {\r\n                    token: 'delimiter.html',\r\n                    next: '@styleEmbedded.$S2',\r\n                    nextEmbedded: '$S2'\r\n                }\r\n            ],\r\n            [/\"([^\"]*)\"/, 'attribute.value'],\r\n            [/'([^']*)'/, 'attribute.value'],\r\n            [/[\\w\\-]+/, 'attribute.name'],\r\n            [/=/, 'delimiter'],\r\n            [/[ \\t\\r\\n]+/],\r\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop' }]\r\n        ],\r\n        styleEmbedded: [\r\n            [\r\n                /\\{\\{/,\r\n                {\r\n                    token: '@rematch',\r\n                    switchTo: '@handlebarsInEmbeddedState.styleEmbedded.$S2',\r\n                    nextEmbedded: '@pop'\r\n                }\r\n            ],\r\n            [/<\\/style/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }]\r\n        ],\r\n        // -- END <style> tags handling\r\n        handlebarsInSimpleState: [\r\n            [/\\{\\{\\{?/, 'delimiter.handlebars'],\r\n            [/\\}\\}\\}?/, { token: 'delimiter.handlebars', switchTo: '@$S2.$S3' }],\r\n            { include: 'handlebarsRoot' }\r\n        ],\r\n        handlebarsInEmbeddedState: [\r\n            [/\\{\\{\\{?/, 'delimiter.handlebars'],\r\n            [\r\n                /\\}\\}\\}?/,\r\n                {\r\n                    token: 'delimiter.handlebars',\r\n                    switchTo: '@$S2.$S3',\r\n                    nextEmbedded: '$S3'\r\n                }\r\n            ],\r\n            { include: 'handlebarsRoot' }\r\n        ],\r\n        handlebarsRoot: [\r\n            [/\"[^\"]*\"/, 'string.handlebars'],\r\n            [/[#/][^\\s}]+/, 'keyword.helper.handlebars'],\r\n            [/else\\b/, 'keyword.helper.handlebars'],\r\n            [/[\\s]+/],\r\n            [/[^}]/, 'variable.parameter.handlebars']\r\n        ]\r\n    }\r\n};\r\n"],"names":["EMPTY_ELEMENTS","conf","wordPattern","comments","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","onEnterRules","beforeText","RegExp","join","afterText","action","indentAction","IndentAction","IndentOutdent","Indent","language","defaultToken","tokenPostfix","tokenizer","root","token","switchTo","next","doctype","comment","commentBlock","commentHtml","otherTag","script","nextEmbedded","scriptAfterType","scriptAfterTypeEquals","scriptWithCustomType","scriptEmbedded","style","styleAfterType","styleAfterTypeEquals","styleWithCustomType","styleEmbedded","handlebarsInSimpleState","include","handlebarsInEmbeddedState","handlebarsRoot"],"version":3,"file":"handlebars.b7d460e4.js.map"}