{"mappings":"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","sources":["./node_modules/monaco-editor/esm/vs/basic-languages/css/css.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    wordPattern: /(#?-?\\d*\\.\\d\\w*%?)|((::|[@#.!:])?[\\w-?]+%?)|::|[@#.!:]/g,\r\n    comments: {\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\r\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\r\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\r\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\r\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp('^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/'),\r\n            end: new RegExp('^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/')\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.css',\r\n    ws: '[ \\t\\n\\r\\f]*',\r\n    identifier: '-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.bracket' },\r\n        { open: '[', close: ']', token: 'delimiter.bracket' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '<', close: '>', token: 'delimiter.angle' }\r\n    ],\r\n    tokenizer: {\r\n        root: [{ include: '@selector' }],\r\n        selector: [\r\n            { include: '@comments' },\r\n            { include: '@import' },\r\n            { include: '@strings' },\r\n            [\r\n                '[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)',\r\n                { token: 'keyword', next: '@keyframedeclaration' }\r\n            ],\r\n            ['[@](page|content|font-face|-moz-document)', { token: 'keyword' }],\r\n            ['[@](charset|namespace)', { token: 'keyword', next: '@declarationbody' }],\r\n            [\r\n                '(url-prefix)(\\\\()',\r\n                ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]\r\n            ],\r\n            [\r\n                '(url)(\\\\()',\r\n                ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]\r\n            ],\r\n            { include: '@selectorname' },\r\n            ['[\\\\*]', 'tag'],\r\n            ['[>\\\\+,]', 'delimiter'],\r\n            ['\\\\[', { token: 'delimiter.bracket', next: '@selectorattribute' }],\r\n            ['{', { token: 'delimiter.bracket', next: '@selectorbody' }]\r\n        ],\r\n        selectorbody: [\r\n            { include: '@comments' },\r\n            ['[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))', 'attribute.name', '@rulevalue'],\r\n            ['}', { token: 'delimiter.bracket', next: '@pop' }]\r\n        ],\r\n        selectorname: [\r\n            ['(\\\\.|#(?=[^{])|%|(@identifier)|:)+', 'tag'] // selector (.foo, div, ...)\r\n        ],\r\n        selectorattribute: [\r\n            { include: '@term' },\r\n            [']', { token: 'delimiter.bracket', next: '@pop' }]\r\n        ],\r\n        term: [\r\n            { include: '@comments' },\r\n            [\r\n                '(url-prefix)(\\\\()',\r\n                ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]\r\n            ],\r\n            [\r\n                '(url)(\\\\()',\r\n                ['attribute.value', { token: 'delimiter.parenthesis', next: '@urldeclaration' }]\r\n            ],\r\n            { include: '@functioninvocation' },\r\n            { include: '@numbers' },\r\n            { include: '@name' },\r\n            ['([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])', 'delimiter'],\r\n            [',', 'delimiter']\r\n        ],\r\n        rulevalue: [\r\n            { include: '@comments' },\r\n            { include: '@strings' },\r\n            { include: '@term' },\r\n            ['!important', 'keyword'],\r\n            [';', 'delimiter', '@pop'],\r\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\r\n        ],\r\n        warndebug: [['[@](warn|debug)', { token: 'keyword', next: '@declarationbody' }]],\r\n        import: [['[@](import)', { token: 'keyword', next: '@declarationbody' }]],\r\n        urldeclaration: [\r\n            { include: '@strings' },\r\n            ['[^)\\r\\n]+', 'string'],\r\n            ['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\r\n        ],\r\n        parenthizedterm: [\r\n            { include: '@term' },\r\n            ['\\\\)', { token: 'delimiter.parenthesis', next: '@pop' }]\r\n        ],\r\n        declarationbody: [\r\n            { include: '@term' },\r\n            [';', 'delimiter', '@pop'],\r\n            ['(?=})', { token: '', next: '@pop' }] // missing semicolon\r\n        ],\r\n        comments: [\r\n            ['\\\\/\\\\*', 'comment', '@comment'],\r\n            ['\\\\/\\\\/+.*', 'comment']\r\n        ],\r\n        comment: [\r\n            ['\\\\*\\\\/', 'comment', '@pop'],\r\n            [/[^*/]+/, 'comment'],\r\n            [/./, 'comment']\r\n        ],\r\n        name: [['@identifier', 'attribute.value']],\r\n        numbers: [\r\n            [\r\n                '-?(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?',\r\n                { token: 'attribute.value.number', next: '@units' }\r\n            ],\r\n            ['#[0-9a-fA-F_]+(?!\\\\w)', 'attribute.value.hex']\r\n        ],\r\n        units: [\r\n            [\r\n                '(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?',\r\n                'attribute.value.unit',\r\n                '@pop'\r\n            ]\r\n        ],\r\n        keyframedeclaration: [\r\n            ['@identifier', 'attribute.value'],\r\n            ['{', { token: 'delimiter.bracket', switchTo: '@keyframebody' }]\r\n        ],\r\n        keyframebody: [\r\n            { include: '@term' },\r\n            ['{', { token: 'delimiter.bracket', next: '@selectorbody' }],\r\n            ['}', { token: 'delimiter.bracket', next: '@pop' }]\r\n        ],\r\n        functioninvocation: [\r\n            ['@identifier\\\\(', { token: 'attribute.value', next: '@functionarguments' }]\r\n        ],\r\n        functionarguments: [\r\n            ['\\\\$@identifier@ws:', 'attribute.name'],\r\n            ['[,]', 'delimiter'],\r\n            { include: '@term' },\r\n            ['\\\\)', { token: 'attribute.value', next: '@pop' }]\r\n        ],\r\n        strings: [\r\n            ['~?\"', { token: 'string', next: '@stringenddoublequote' }],\r\n            [\"~?'\", { token: 'string', next: '@stringendquote' }]\r\n        ],\r\n        stringenddoublequote: [\r\n            ['\\\\\\\\.', 'string'],\r\n            ['\"', { token: 'string', next: '@pop' }],\r\n            [/[^\\\\\"]+/, 'string'],\r\n            ['.', 'string']\r\n        ],\r\n        stringendquote: [\r\n            ['\\\\\\\\.', 'string'],\r\n            [\"'\", { token: 'string', next: '@pop' }],\r\n            [/[^\\\\']+/, 'string'],\r\n            ['.', 'string']\r\n        ]\r\n    }\r\n};\r\n"],"names":["conf","wordPattern","comments","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","ws","identifier","token","tokenizer","root","include","selector","next","selectorbody","selectorname","selectorattribute","term","rulevalue","warndebug","import","urldeclaration","parenthizedterm","declarationbody","comment","name","numbers","units","keyframedeclaration","switchTo","keyframebody","functioninvocation","functionarguments","strings","stringenddoublequote","stringendquote"],"version":3,"file":"css.69ac8783.js.map"}