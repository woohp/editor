{"mappings":"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","sources":["./node_modules/monaco-editor/esm/vs/basic-languages/coffee/coffee.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\r\n    comments: {\r\n        blockComment: ['###', '###'],\r\n        lineComment: '#'\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: \"'\", close: \"'\" }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp('^\\\\s*#region\\\\b'),\r\n            end: new RegExp('^\\\\s*#endregion\\\\b')\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    ignoreCase: true,\r\n    tokenPostfix: '.coffee',\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\r\n    ],\r\n    regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\r\n    keywords: [\r\n        'and',\r\n        'or',\r\n        'is',\r\n        'isnt',\r\n        'not',\r\n        'on',\r\n        'yes',\r\n        '@',\r\n        'no',\r\n        'off',\r\n        'true',\r\n        'false',\r\n        'null',\r\n        'this',\r\n        'new',\r\n        'delete',\r\n        'typeof',\r\n        'in',\r\n        'instanceof',\r\n        'return',\r\n        'throw',\r\n        'break',\r\n        'continue',\r\n        'debugger',\r\n        'if',\r\n        'else',\r\n        'switch',\r\n        'for',\r\n        'while',\r\n        'do',\r\n        'try',\r\n        'catch',\r\n        'finally',\r\n        'class',\r\n        'extends',\r\n        'super',\r\n        'undefined',\r\n        'then',\r\n        'unless',\r\n        'until',\r\n        'loop',\r\n        'of',\r\n        'by',\r\n        'when'\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [/\\@[a-zA-Z_]\\w*/, 'variable.predefined'],\r\n            [\r\n                /[a-zA-Z_]\\w*/,\r\n                {\r\n                    cases: {\r\n                        this: 'variable.predefined',\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': ''\r\n                    }\r\n                }\r\n            ],\r\n            // whitespace\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            // Comments\r\n            [/###/, 'comment', '@comment'],\r\n            [/#.*$/, 'comment'],\r\n            // regular expressions\r\n            ['///', { token: 'regexp', next: '@hereregexp' }],\r\n            [/^(\\s*)(@regEx)/, ['', 'regexp']],\r\n            [/(\\()(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\r\n            [/(\\,)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\=)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\:)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\[)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\r\n            [/(\\!)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\&)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\|)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\?)(\\s*)(@regEx)/, ['delimiter', '', 'regexp']],\r\n            [/(\\{)(\\s*)(@regEx)/, ['@brackets', '', 'regexp']],\r\n            [/(\\;)(\\s*)(@regEx)/, ['', '', 'regexp']],\r\n            // delimiters\r\n            [\r\n                /}/,\r\n                {\r\n                    cases: {\r\n                        '$S2==interpolatedstring': {\r\n                            token: 'string',\r\n                            next: '@pop'\r\n                        },\r\n                        '@default': '@brackets'\r\n                    }\r\n                }\r\n            ],\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/@symbols/, 'delimiter'],\r\n            // numbers\r\n            [/\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\r\n            [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\r\n            [/0[0-7]+(?!\\d)/, 'number.octal'],\r\n            [/\\d+/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[,.]/, 'delimiter'],\r\n            // strings:\r\n            [/\"\"\"/, 'string', '@herestring.\"\"\"'],\r\n            [/'''/, 'string', \"@herestring.'''\"],\r\n            [\r\n                /\"/,\r\n                {\r\n                    cases: {\r\n                        '@eos': 'string',\r\n                        '@default': { token: 'string', next: '@string.\"' }\r\n                    }\r\n                }\r\n            ],\r\n            [\r\n                /'/,\r\n                {\r\n                    cases: {\r\n                        '@eos': 'string',\r\n                        '@default': { token: 'string', next: \"@string.'\" }\r\n                    }\r\n                }\r\n            ]\r\n        ],\r\n        string: [\r\n            [/[^\"'\\#\\\\]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\./, 'string.escape.invalid'],\r\n            [/\\./, 'string.escape.invalid'],\r\n            [\r\n                /#{/,\r\n                {\r\n                    cases: {\r\n                        '$S2==\"': {\r\n                            token: 'string',\r\n                            next: 'root.interpolatedstring'\r\n                        },\r\n                        '@default': 'string'\r\n                    }\r\n                }\r\n            ],\r\n            [\r\n                /[\"']/,\r\n                {\r\n                    cases: {\r\n                        '$#==$S2': { token: 'string', next: '@pop' },\r\n                        '@default': 'string'\r\n                    }\r\n                }\r\n            ],\r\n            [/#/, 'string']\r\n        ],\r\n        herestring: [\r\n            [\r\n                /(\"\"\"|''')/,\r\n                {\r\n                    cases: {\r\n                        '$1==$S2': { token: 'string', next: '@pop' },\r\n                        '@default': 'string'\r\n                    }\r\n                }\r\n            ],\r\n            [/[^#\\\\'\"]+/, 'string'],\r\n            [/['\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\./, 'string.escape.invalid'],\r\n            [/#{/, { token: 'string.quote', next: 'root.interpolatedstring' }],\r\n            [/#/, 'string']\r\n        ],\r\n        comment: [\r\n            [/[^#]+/, 'comment'],\r\n            [/###/, 'comment', '@pop'],\r\n            [/#/, 'comment']\r\n        ],\r\n        hereregexp: [\r\n            [/[^\\\\\\/#]+/, 'regexp'],\r\n            [/\\\\./, 'regexp'],\r\n            [/#.*$/, 'comment'],\r\n            ['///[igm]*', { token: 'regexp', next: '@pop' }],\r\n            [/\\//, 'regexp']\r\n        ]\r\n    }\r\n};\r\n"],"names":["conf","wordPattern","comments","blockComment","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","ignoreCase","tokenPostfix","token","regEx","keywords","symbols","escapes","tokenizer","root","cases","this","@keywords","@default","next","$S2==interpolatedstring","@eos","string","$S2==\"","$#==$S2","herestring","$1==$S2","comment","hereregexp"],"version":3,"file":"coffee.cf6e7aaf.js.map"}